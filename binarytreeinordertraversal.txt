from typing import Optional, List

# Definition for a binary tree node.
class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

class Solution:
    def inorderTraversal(self, root: Optional[TreeNode]) -> List[int]:
        """
        Performs inorder traversal on a binary tree.

        Args:
        root (TreeNode): Root of the binary tree.

        Returns:
        List[int]: List of values in inorder sequence.
        """

        def dfs(node):
            if not node:
                return []

            # Inorder: left → root → right
            return dfs(node.left) + [node.val] + dfs(node.right)

        return dfs(root)
